import sys
import sqlite3
from PyQt5.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QWidget, QLabel,
                             QPushButton, QInputDialog, QMessageBox, QDialog, QFormLayout,
                             QComboBox, QDateEdit, QTimeEdit, QLineEdit)
from PyQt5.QtCore import Qt, QDate, QTime

class BookDialog(QDialog):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Book Appointment")
        self.setFixedSize(300, 220)
        layout = QFormLayout(self)

        self.name = QLineEdit()
        self.name.setPlaceholderText("Enter your full name")
        self.doctor = QComboBox()
        self.doctor.addItems(["Doctor A", "Doctor B", "Doctor C", "Doctor D"])
        self.date = QDateEdit(QDate.currentDate())
        self.date.setCalendarPopup(True)
        self.time = QTimeEdit(QTime(9, 0))

        layout.addRow("Name:", self.name)
        layout.addRow("Doctor:", self.doctor)
        layout.addRow("Date:", self.date)
        layout.addRow("Time:", self.time)

        ok = QPushButton("Book")
        ok.setStyleSheet("background-color: #28a745; color: white; padding: 5px; border-radius: 5px;")
        ok.clicked.connect(self.accept)
        layout.addWidget(ok)

    def get_data(self):
        return (self.name.text(), self.doctor.currentText(), self.date.date().toString("yyyy-MM-dd"), self.time.time().toString("hh:mm AP"))

class ClinicApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Clinic Appointment System")
        self.setFixedSize(350, 550)

        self.conn = sqlite3.connect("clinicers.db")
        self.cursor = self.conn.cursor()
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS appointments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT, doctor TEXT, date TEXT, time TEXT,
                status TEXT DEFAULT 'Booked', payment TEXT DEFAULT 'Unpaid'
            )
        """)

        layout = QVBoxLayout()
        title = QLabel("Clinic Appointment System")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("font-size: 18px; font-weight: bold; color: #2c3e50; margin: 15px;")
        layout.addWidget(title)

        buttons = [
            ("Book Appointment", "#007bff", self.book),
            ("Check-in", "#17a2b8", self.check_in),
            ("Consultation", "#ffc107", self.consult),
            ("Billing (Cash Only)", "#28a745", self.pay),
            ("Cancel Appointment", "#dc3545", self.cancel),
            ("Show Appointments", "#6c757d", self.show_all),
            ("Exit", "#343a40", self.close)
        ]

        for text, color, func in buttons:
            btn = QPushButton(text)
            btn.setStyleSheet(f"background-color: {color}; color: white; font-weight: bold; border-radius: 8px; padding: 10px;")
            btn.clicked.connect(func)
            layout.addWidget(btn)

        widget = QWidget()
        widget.setStyleSheet("background-color: #ecf0f1; padding: 10px;")
        widget.setLayout(layout)
        self.setCentralWidget(widget)

    def book(self):
        dialog = BookDialog()
        if dialog.exec_():
            name, doctor, date, time = dialog.get_data()
            if not name:
                QMessageBox.warning(self, "Error", "Name cannot be empty.")
                return

            self.cursor.execute("SELECT * FROM appointments WHERE doctor=? AND date=? AND time=? AND status!='Cancelled'", (doctor, date, time))
            if self.cursor.fetchone():
                QMessageBox.warning(self, "Error", f"{doctor} is already booked at {time}.")
                return

            self.cursor.execute("INSERT INTO appointments (name, doctor, date, time) VALUES (?, ?, ?, ?)", (name, doctor, date, time))
            self.conn.commit()
            QMessageBox.information(self, "Success", f"Appointment booked for {name} with {doctor} on {date} at {time}.")

    def check_in(self):
        name, ok = QInputDialog.getText(self, "Check-in", "Enter your name:")
        if ok and name:
            self.cursor.execute("SELECT id FROM appointments WHERE LOWER(name)=LOWER(?) AND status='Booked'", (name,))
            r = self.cursor.fetchone()
            if r:
                self.cursor.execute("UPDATE appointments SET status='Checked-in' WHERE id=?", (r[0],))
                self.conn.commit()
                QMessageBox.information(self, "Success", f"{name} is now checked in.")
            else:
                QMessageBox.warning(self, "Error", "No booked appointment found.")

    def consult(self):
        name, ok = QInputDialog.getText(self, "Consultation", "Enter your name:")
        if ok and name:
            self.cursor.execute("SELECT id FROM appointments WHERE LOWER(name)=LOWER(?) AND status='Checked-in'", (name,))
            r = self.cursor.fetchone()
            if r:
                self.cursor.execute("UPDATE appointments SET status='Consulted' WHERE id=?", (r[0],))
                self.conn.commit()
                QMessageBox.information(self, "Success", f"Consultation completed for {name}.")
            else:
                QMessageBox.warning(self, "Error", "Please check-in first.")

    def pay(self):
        name, ok = QInputDialog.getText(self, "Billing", "Enter your name:")
        if ok and name:
            self.cursor.execute("SELECT id FROM appointments WHERE LOWER(name)=LOWER(?) AND status='Consulted'", (name,))
            r = self.cursor.fetchone()
            if r:
                self.cursor.execute("UPDATE appointments SET payment='Paid' WHERE id=?", (r[0],))
                self.conn.commit()
                QMessageBox.information(self, "Success", f"{name}'s payment recorded (Cash Only).")
            else:
                QMessageBox.warning(self, "Error", "Consultation not yet done.")

    def cancel(self):
        name, ok = QInputDialog.getText(self, "Cancel Appointment", "Enter your name:")
        if ok and name:
            self.cursor.execute("SELECT id FROM appointments WHERE LOWER(name)=LOWER(?) AND status!='Cancelled'", (name,))
            r = self.cursor.fetchone()
            if r:
                self.cursor.execute("UPDATE appointments SET status='Cancelled' WHERE id=?", (r[0],))
                self.conn.commit()
                QMessageBox.information(self, "Cancelled", f"{name}'s appointment has been cancelled.")
            else:
                QMessageBox.warning(self, "Error", "No active appointment found.")

    def show_all(self):
        self.cursor.execute("SELECT * FROM appointments ORDER BY date, time")
        rows = self.cursor.fetchall()
        if rows:
            text = "\n".join([f"{r[1]} | {r[2]} | {r[3]} {r[4]} | {r[5]} | {r[6]}" for r in rows])
        else:
            text = "No appointments found."
        QMessageBox.information(self, "Appointments", text)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = ClinicApp()
    window.show()
    sys.exit(app.exec_())
